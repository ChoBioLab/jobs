#!/bin/bash
#BSUB -P acc_untreatedIBD
#BSUB -W 48:00
#BSUB -q premium
#BSUB -J <JOB NAME>
#BSUB -o output_%J.stdout
#BSUB -e error_%J.sterr

# README
# this script should be executed from site of cellranger dir
# fastqs should be arranged in dirs labeled by sample
# make note not to leave trailing / in param paths
# all cluster config files (config.json, lsf.template, retry.json)
# should be present in the same location given for lsf.template

# ml cellranger parallel
ml cellranger/7.1.0

set -a

# params
PROJ_DIR=               # /path/to/proj/dir
CONFIG=$PROJ_DIR        # /path/to/config.csv
RUN_ID=                 # unique run ID
CLUST_TEMPLATE=		      # /path/to/lsf.template cluster file

################################################################################

exec >> cr_${PIPELINE}_`date '+%F_%H%M'`.log
exec 2>&1

OUT_DIR=cr_arc_${PIPELINE}_`date '+%F_%H%M'`
mkdir -p $PROJ_DIR/analysis/cellranger/$OUT_DIR && cd $_
MRO_DISK_SPACE_CHECK=disable

# core cellranger function
cellranger multi \
  --id=$RUN_ID \
  --csv=$CONFIG \
  --jobmode=$CLUST_TEMPLATE

mv $CONFIG .

# run cellranger summarizer

# Create temporary directory for processing
temp_dir=$(mktemp -d)
trap "rm -rf $temp_dir" EXIT

echo "Processing metrics..."

# First pass: collect sample-specific (Cells category) metrics
for sample_dir in */; do
    sample_name="${sample_dir%/}"

    for subsample_dir in "${sample_dir}outs/per_sample_outs"/*/; do
        if [ -d "$subsample_dir" ]; then
            subsample_name=$(basename "$subsample_dir")
            metrics_file="${subsample_dir}metrics_summary.csv"

            if [ -f "$metrics_file" ]; then
                label="${sample_name}_${subsample_name}"

                # Extract only Cells category metrics (sample-specific)
                awk -F',' -v sample="$label" '
                NR > 1 && $1 == "Cells" {
                    # Create clean metric name
                    metric = $5
                    if ($3 != "" && $4 != "") {
                        metric = $3 " " $4 " " $5
                    } else if ($3 != "") {
                        metric = $3 " " $5
                    } else if ($4 != "") {
                        metric = $4 " " $5
                    }
                    gsub(/^[ ]+|[ ]+$/, "", metric)  # trim spaces
                    print sample "," metric "," $6
                }' "$metrics_file" >> "$temp_dir/sample_metrics.csv"
            fi
        fi
    done
done

# Get unique metrics for header
cut -d',' -f2 "$temp_dir/sample_metrics.csv" | sort -u > "$temp_dir/unique_metrics.txt"

# Create header
echo -n "Sample" > combined_metrics.csv
while IFS= read -r metric; do
    echo -n ",\"$metric\"" >> combined_metrics.csv
done < "$temp_dir/unique_metrics.txt"
echo "" >> combined_metrics.csv

# Create data rows
for sample_dir in */; do
    sample_name="${sample_dir%/}"

    for subsample_dir in "${sample_dir}outs/per_sample_outs"/*/; do
        if [ -d "$subsample_dir" ]; then
            subsample_name=$(basename "$subsample_dir")
            label="${sample_name}_${subsample_name}"

            # Check if this sample has data
            if grep -q "^$label," "$temp_dir/sample_metrics.csv"; then
                echo -n "$label" >> combined_metrics.csv

                # Create associative array for this sample
                declare -A sample_data
                while IFS=',' read -r sample metric value; do
                    if [ "$sample" = "$label" ]; then
                        sample_data["$metric"]="$value"
                    fi
                done < "$temp_dir/sample_metrics.csv"

                # Output values in header order
                while IFS= read -r metric; do
                    if [ -n "${sample_data[$metric]}" ]; then
                        echo -n ",\"${sample_data[$metric]}\"" >> combined_metrics.csv
                    else
                        echo -n "," >> combined_metrics.csv
                    fi
                done < "$temp_dir/unique_metrics.txt"
                echo "" >> combined_metrics.csv

                unset sample_data
            fi
        fi
    done
done

echo "Sample-specific metrics saved to combined_metrics.csv"

# Optional: Create separate library-level summary
echo "Creating library summary..."
first_sample=$(ls -d */ | head -n 1)
first_metrics="${first_sample}outs/per_sample_outs/$(ls "${first_sample}outs/per_sample_outs" | head -n 1)/metrics_summary.csv"

if [ -f "$first_metrics" ]; then
    echo "Sample,Metric,Value" > library_summary.csv
    for sample_dir in */; do
        sample_name="${sample_dir%/}"
        metrics_file="${sample_dir}outs/per_sample_outs/$(ls "${sample_dir}outs/per_sample_outs" | head -n 1)/metrics_summary.csv"

        if [ -f "$metrics_file" ]; then
            awk -F',' -v sample="$sample_name" '
            NR > 1 && $1 == "Library" && $3 == "" && $4 == "" {
                print sample "," $5 "," $6
            }' "$metrics_file" >> library_summary.csv
        fi
    done
    echo "Library-level metrics saved to library_summary.csv"
fi

